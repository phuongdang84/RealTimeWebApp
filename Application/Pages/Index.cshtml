@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="bar bar-header bar-dark">
    <span class="title">Smart garden</span>
    <div class="button-content pull-right">
        <button class="button button-clear" onclick="location.href='About'">
            <img src="./img/account.png"
                 class="icon" />
        </button>
    </div>
</div>
<div class="main-container">
    <div class="header-content" data-bind="foreach: lineChartData">
        <div class="header-info">
            <span class="label temperator-info" id="temp-level" data-bind +="text: LiquidHum">23</span>
            <p class="label humidity">Humidity (%)</p>
        </div>
        <div class="header-info temperator-info">
            <span class="label temperator-info" id="temp-level" data-bind="text: LiquidTemp">23</span>
            <img src="./img/temperator.png" class="icon temperator" />
        </div>
    </div>
    <div class="main-content">

        <!--Chart.js Canvas Tag -->
        @*<canvas id="canvas"></canvas>*@

        <div class="col-lg-12 bigChart" data-bind="lineChart: lineChartData"></div>

        <!-- Soil moisture -->
        <div class="circleChart progress-cycle" id="progress-cycle">
        </div>
        <div class="buttons">
            <div class="button-content">
                <button type="button" onclick=" CheckHeart()">
                    <img src="./img/moisture.png" class="icon" />
                </button> 
            </div>
            <div class="button-content">
                <button type="button" onclick=" Reset()">
                    <img src="./img/setting.png" class="icon" />
                </button> 
            </div>
        </div>
        <!-- <div id='buttons'>
            <button class='rhythmChange' value='NSR'>NSR</button>
            <button class='rhythmChange' value='vTach'>vTach</button>
            <button class='rhythmChange' value='vFib'>vFib</button>
            <button class='rhythmChange' value='asystole'>asystole</button>
            <div>
                -->
    </div>

    @*<div class="footer-content">
        <button type="button" id="btn-voice" class="btn-voice">
            <img src="./img/micro.png" class="icon" />
        </button>
        <div class="text-content">
            <p class="title">What do you want?</p>
            <p class="sub-title">For example, say "Watering"</p>
        </div>
    </div>*@
    <div class="bottom-content-button">
        <button type="button" id="button-bottom" class="btn-bottom" onclick="location.href='History';">
            <img src="./img/history.png">
        </button>
    </div>
</div>

@section Scripts {

    <script src="~/lib/chart-data/data-view-model.js"></script>
    <script src="~/lib/chart-data/line-chart-binding.js"></script>
    <script type="text/javascript" charset="utf-8">

        // Get value from APis


        /////////////////////////////

        // circle chart Soil moisture
      $("#progress-cycle").circleChart({
            color: "#00FFFF",
            backgroundColor: "#e6e6e6",
            size: 250,
            value: 10,
            widthRatio: 0.3,
            cAngle: 0,
            startAngle: 130,
            textCenter: true,
            textSize: true,
            relativeTextSize: 1 / 2,

            onDraw: function (el, circle) {
                if (circle.value <= 10) {
                    circle.text("<p class='alarm'>10%</p> <p class='sub-title alarm'>Soil moisture</p>");
                } else if (circle.value > 10 && circle.value <= 30) {
                    circle.text("<p class='warning'>" + Math.round(circle.value) + "%</p><p class='sub-title warning'>Soil moisture</p>");
                } else if (circle.value > 30 && circle.value <= 60) {
                    circle.text("<p class='avarage'>" + Math.round(circle.value) + "%</p><p class='sub-title average'>Soil moisture</p>");
                } else if (circle.value > 60 && circle.value <= 90) {
                    circle.text("<p class='high'>" + Math.round(circle.value) + "%</p><p class='sub-title high'>Soil moisture</p>");
                } else {
                    circle.text("<p class='high'>" + Math.round(circle.value) + "%</p><p class='sub-title high'>Soil moisture</p>");
                }
            }
        }); 

        ////////////////////////////
        setInterval(function () {

            // signal connection
            //var icon = Math.floor(Math.random() * 4);
            //document.getElementById("signal").src = "./img/signal-100.png";

            //if (icon == 0) {
            //    document.getElementById("signal").src = "./img/signal-25.png";
            //} else if (icon == 1) {
            //    document.getElementById("signal").src = "./img/signal-50.png";
            //} else if (icon == 2) {
            //    document.getElementById("signal").src = "./img/signal-75.png";
            //} else {
            //    document.getElementById("signal").src = "./img/signal-100.png";
            //}

            // heart beat number
        //    var ranNum = Math.floor(23 + Math.random() * 10);
        //    document.getElementById("temp-level").innerHTML = ranNum + "";
        }, 2000);
        

        /////////////////////////////
         
        var D3KD = this.D3KD || {};

        (function () {
            "use strict";
            var dataViewModel = new D3KD.dataViewModel();

            var protocol = location.protocol === "https:" ? "wss:" : "ws:";
            var wsUri = protocol + "//localhost:1088/";
            var socket = new WebSocket(wsUri);

            socket.onmessage = function (e) {
                var reading = JSON.parse(e.data);
                reading.Date = new Date(reading.Date);

              //  document.getElementById("temp-level").innerHTML = reading.LiquidTemp + "";

                dataViewModel.addDataPoint(reading);
            };

            ko.applyBindings(dataViewModel);

        }());

        /*
        var lineChartData = {
            labels: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],
            datasets: [{
                label: 'Air moisture',
                borderColor: window.chartColors.orange,
                backgroundColor: window.chartColors.orange,
                fill: false,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ],
                yAxisID: 'y-axis-1',
            }, {
                label: 'Soil moisture',
                borderColor: window.chartColors.red,
                backgroundColor: window.chartColors.red,
                fill: false,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ],
                yAxisID: 'y-axis-2'
            }]
        };

        window.onload = function () {
            var ctx = document.getElementById('canvas').getContext('2d');
            window.myLine = Chart.Line(ctx, {
                data: lineChartData,
                options: {
                    responsive: true,
                    hoverMode: 'index',
                    stacked: false,
                    title: {
                        display: true,
                        text: 'Moisture diagram'
                    },
                    scales: {
                        yAxes: [{
                            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                            display: true,
                            position: 'left',
                            id: 'y-axis-1',
                        }, {
                            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                            display: true,
                            position: 'right',
                            id: 'y-axis-2',

                            // grid line settings
                            gridLines: {
                                drawOnChartArea: false, // only want the grid lines for one axis to show up
                            },
                        }],
                    }
                }
            });
        };
        */
    </script>
}